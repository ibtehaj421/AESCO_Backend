using System.Formats.Asn1;
using Microsoft.AspNetCore.Http.HttpResults;
using ASCO.Models;
using ASCO.Repositories;
using ASCP.Repositories;


namespace ASCO.Services {
    public class UserService
    {
        private readonly UserRepository _userRepository;
        private readonly JwtServices _jwtServices; //will be used in the authentication service later on

        private readonly RoleRepository _roleRepository;
        public UserService(UserRepository userRepository, JwtServices jwtServices, RoleRepository roleRepository)
        {
            _jwtServices = jwtServices;
            _userRepository = userRepository;
            _roleRepository = roleRepository;
        }


        //user registration
        public async Task<string> RegisterUserAsync(CreateUserDto userDto)
        {
            if (await _userRepository.UserExistsAsync(userDto.Email))
            {
                return "User with this email already exists.";
            }

            var user = new User
            {
                // Basic Information - stored directly in Users table
                Name = userDto.Name,
                Surname = userDto.Surname,
                Nationality = userDto.Nationality,
                IdenNumber = Convert.ToInt64(userDto.IdenNumber),
                DateOfBirth = userDto.DateOfBirth,
                BirthPlace = userDto.BirthPlace,
                Gender = userDto.Gender,

                //employment details
                JobType = userDto.JobType,
                Rank = userDto.Rank,
                MaritalStatus = userDto.MaritalStatus,
                MilitaryStatus = userDto.MilitaryStatus,

                //education details
                EducationLevel = userDto.EducationLevel,
                GraduationYear = Convert.ToInt32(userDto.GraduationYear),
                School = userDto.School,

                //professsional details
                Competency = userDto.Competency,
                OrganizationUnit = userDto.OrganizationUnit,

                //contact details
                Email = userDto.Email,
                PasswordHash = BCrypt.Net.BCrypt.HashPassword(userDto.Password), // Hash the password before

                //family details
                FatherName = userDto.FatherName,

                //Status and timestamps
                Status = userDto.Status ?? "pending", // Default status or admin assigned
                CreatedAt = DateTime.UtcNow,
                WorkEndDate = userDto.WorkEndDate,

                //security logs
                FailedLoginAttempts = 0,
                EmailConfirmed = false
            };

            var result = await _userRepository.AddUserAsync(user);

            var respString = "";
            if (result > 0)
            {
                respString += "User registered successfully.";
            }
            else
            {
                return "Error registering user.";
            }

            //handle role assignments
            if (userDto.RoleIds?.Any() == true)
            {
                // Assign roles to the user
                //fetch the user ID as generated by the database
                var id = await _userRepository.GetUserID(userDto.Email);
                if (id == 0)
                {
                    respString += "Error retrieving user ID after registration.";
                    return respString;
                }

                var userRoles = new List<UserRole>();
                foreach (var roleId in userDto.RoleIds)
                {
                    //verify whether the role exists and if not then throw an exception
                    var roleExist = await _roleRepository.CheckRoleExistsAsync(roleId);
                    if (roleExist == 0)
                    {
                        throw new ArgumentException($"Role with ID {roleId} does not exist.");
                    }

                    var userRole = new UserRole
                    {
                        UserId = (int)id,
                        RoleId = roleId,
                        AssignedByUserId = 1, //let this be a placeholder for now this is not required in a sense but lets keep it for the sake of it
                        AssignedAt = DateTime.UtcNow,
                        ExpiresAt = null // No expiration by default
                    };

                    userRoles.Add(userRole);
                }

                //save all roles together at the end.
                var check = await _roleRepository.AssignRolesToUserAsync(userRoles);
                if (check > 0)
                {
                    respString += " Roles assigned successfully.";
                }
                else
                {
                    respString += " Error assigning roles.";
                }
            }
            return respString; //return the string generated to show the logs of what was created.
            //will add some other details as well later on if needed.
        }
        
        public async Task<string?> LoginUserAsync(LoginDto loginDto)
        {
            var user = await _userRepository.GetUserByEmailAsync(loginDto.Email);
            if (user == null)
            {
                return null; // User not found
            }

            // Verify the password
            if (!BCrypt.Net.BCrypt.Verify(loginDto.Password, user.PasswordHash))
            {
                // Increment failed login attempts
                //user.FailedLoginAttempts += 1;
                //await _userRepository.UpdateUserAsync(user);
                return null; // Invalid password
            }

            // Reset failed login attempts on successful login
            //user.FailedLoginAttempts = 0;
            //await _userRepository.UpdateUserAsync(user);

            // Generate JWT token
            var token = _jwtServices.GenerateJwtToken(user);

            return token;
        }
       
    }
}